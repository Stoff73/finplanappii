import jsPDF from 'jspdf';

class PDFGeneratorService {
    constructor() {
        this.doc = null;
        this.currentY = 20;
        this.pageHeight = 280; // A4 height minus margins
        this.margins = { left: 20, right: 20, top: 20, bottom: 20 };
    }

    generateFinancialPlan(userData, extractedData, insights) {
        this.doc = new jsPDF();
        this.currentY = 20;

        try {
            // Title Page
            this.addTitle();
            this.addGenerationDate();
            this.checkPageBreak(40);

            // Executive Summary
            this.addSection('Executive Summary');
            this.addExecutiveSummary(extractedData, insights);

            // Financial Situation
            this.addSection('Current Financial Situation');
            this.addFinancialSituation(extractedData);

            // Goals
            this.addSection('Financial Goals');
            this.addGoals(extractedData);

            // Recommendations
            this.addSection('Key Recommendations');
            this.addRecommendations(extractedData);

            // Next Steps
            this.addSection('Next Steps');
            this.addNextSteps();

            return this.doc;
        } catch (error) {
            console.error('PDF generation error:', error);
            throw new Error('Failed to generate PDF');
        }
    }

    addTitle() {
        this.doc.setFontSize(24);
        this.doc.setFont(undefined, 'bold');
        this.doc.text('Personal Financial Plan', this.margins.left, this.currentY);
        this.currentY += 15;

        this.doc.setFontSize(12);
        this.doc.setFont(undefined, 'normal');
        this.doc.text('Generated by Financial Planning Assistant', this.margins.left, this.currentY);
        this.currentY += 20;
    }

    addGenerationDate() {
        const date = new Date().toLocaleDateString('en-GB', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });

        this.doc.setFontSize(10);
        this.doc.text(`Generated on: ${date}`, this.margins.left, this.currentY);
        this.currentY += 15;
    }

    addSection(title) {
        this.checkPageBreak(30);
        this.doc.setFontSize(16);
        this.doc.setFont(undefined, 'bold');
        this.doc.text(title, this.margins.left, this.currentY);
        this.currentY += 10;

        // Add underline
        this.doc.setLineWidth(0.5);
        this.doc.line(this.margins.left, this.currentY, 180, this.currentY);
        this.currentY += 10;
    }

    addExecutiveSummary(extractedData, insights) {
        this.doc.setFontSize(12);
        this.doc.setFont(undefined, 'normal');

        const completionScore = this.calculateCompletionScore(extractedData);

        const summaryText = [
            `Financial Profile Completion: ${completionScore}%`,
            '',
            'Key Highlights:',
            `• Income sources identified: ${extractedData.income?.length || 0}`,
            `• Financial goals mentioned: ${extractedData.goals?.length || 0}`,
            `• Risk tolerance: ${extractedData.riskTolerance?.level || 'Not assessed'}`,
            '',
            'This plan provides a comprehensive overview of your financial situation',
            'based on the information you have shared. It includes personalized',
            'recommendations to help you achieve your financial goals.'
        ];

        summaryText.forEach(line => {
            this.checkPageBreak(8);
            this.doc.text(line, this.margins.left, this.currentY);
            this.currentY += 8;
        });

        this.currentY += 10;
    }

    addFinancialSituation(extractedData) {
        this.doc.setFontSize(14);
        this.doc.setFont(undefined, 'bold');
        this.doc.text('Income', this.margins.left, this.currentY);
        this.currentY += 8;

        this.doc.setFontSize(12);
        this.doc.setFont(undefined, 'normal');

        if (extractedData.income && extractedData.income.length > 0) {
            extractedData.income.forEach(income => {
                this.checkPageBreak(15);
                const amount = income.amounts?.[0] || 0;
                this.doc.text(`• Monthly income: £${amount.toLocaleString()}`, this.margins.left + 5, this.currentY);
                this.currentY += 6;

                // Add wrapped text for income description
                const lines = this.wrapText(income.text, 150);
                lines.forEach(line => {
                    this.checkPageBreak(6);
                    this.doc.text(`  "${line}"`, this.margins.left + 10, this.currentY);
                    this.currentY += 6;
                });
                this.currentY += 4;
            });
        } else {
            this.doc.text('• No income information provided yet', this.margins.left + 5, this.currentY);
            this.currentY += 8;
        }

        this.currentY += 5;

        // Expenses
        this.doc.setFontSize(14);
        this.doc.setFont(undefined, 'bold');
        this.doc.text('Expenses', this.margins.left, this.currentY);
        this.currentY += 8;

        this.doc.setFontSize(12);
        this.doc.setFont(undefined, 'normal');

        if (extractedData.expenses && extractedData.expenses.length > 0) {
            extractedData.expenses.forEach(expense => {
                this.checkPageBreak(15);
                const amount = expense.amounts?.[0] || 0;
                this.doc.text(`• Monthly expenses: £${amount.toLocaleString()}`, this.margins.left + 5, this.currentY);
                this.currentY += 6;

                const lines = this.wrapText(expense.text, 150);
                lines.forEach(line => {
                    this.checkPageBreak(6);
                    this.doc.text(`  "${line}"`, this.margins.left + 10, this.currentY);
                    this.currentY += 6;
                });
                this.currentY += 4;
            });
        } else {
            this.doc.text('• No expense information provided yet', this.margins.left + 5, this.currentY);
            this.currentY += 8;
        }

        this.currentY += 10;
    }

    addGoals(extractedData) {
        this.doc.setFontSize(12);
        this.doc.setFont(undefined, 'normal');

        if (extractedData.goals && extractedData.goals.length > 0) {
            extractedData.goals.forEach((goal, index) => {
                this.checkPageBreak(20);

                const goalTypes = goal.type?.join(', ') || 'Financial Goal';
                this.doc.setFont(undefined, 'bold');
                this.doc.text(`${index + 1}. ${goalTypes}`, this.margins.left, this.currentY);
                this.currentY += 8;

                this.doc.setFont(undefined, 'normal');

                // Goal description
                const lines = this.wrapText(goal.text, 150);
                lines.forEach(line => {
                    this.checkPageBreak(6);
                    this.doc.text(line, this.margins.left + 5, this.currentY);
                    this.currentY += 6;
                });

                // Goal details
                if (goal.amounts && goal.amounts.length > 0) {
                    this.doc.text(`Target Amount: £${goal.amounts[0].toLocaleString()}`, this.margins.left + 5, this.currentY);
                    this.currentY += 6;
                }

                if (goal.timeframes && goal.timeframes.length > 0) {
                    const timeframe = goal.timeframes[0];
                    this.doc.text(`Timeline: ${timeframe.value} ${timeframe.unit}`, this.margins.left + 5, this.currentY);
                    this.currentY += 6;
                }

                this.currentY += 8;
            });
        } else {
            this.doc.text('No specific goals have been identified yet. Consider discussing your', this.margins.left, this.currentY);
            this.currentY += 6;
            this.doc.text('financial objectives in future conversations.', this.margins.left, this.currentY);
            this.currentY += 10;
        }
    }

    addRecommendations(extractedData) {
        const recommendations = this.generateRecommendations(extractedData);

        this.doc.setFontSize(12);
        this.doc.setFont(undefined, 'normal');

        recommendations.forEach((rec, index) => {
            this.checkPageBreak(15);
            this.doc.setFont(undefined, 'bold');
            this.doc.text(`${index + 1}. ${rec.title}`, this.margins.left, this.currentY);
            this.currentY += 8;

            this.doc.setFont(undefined, 'normal');
            const lines = this.wrapText(rec.description, 150);
            lines.forEach(line => {
                this.checkPageBreak(6);
                this.doc.text(line, this.margins.left + 5, this.currentY);
                this.currentY += 6;
            });

            this.currentY += 8;
        });
    }

    addNextSteps() {
        const nextSteps = [
            'Continue regular financial conversations to refine your plan',
            'Review and update your goals as circumstances change',
            'Consider professional financial advice for complex situations',
            'Monitor your progress regularly using the dashboard',
            'Update your risk tolerance assessment as needed'
        ];

        this.doc.setFontSize(12);
        this.doc.setFont(undefined, 'normal');

        nextSteps.forEach((step, index) => {
            this.checkPageBreak(8);
            this.doc.text(`${index + 1}. ${step}`, this.margins.left, this.currentY);
            this.currentY += 8;
        });

        this.currentY += 15;

        // Footer
        this.doc.setFontSize(10);
        this.doc.setFont(undefined, 'italic');
        this.doc.text('This plan is for informational purposes only and does not constitute financial advice.', this.margins.left, this.currentY);
        this.currentY += 6;
        this.doc.text('Please consult with a qualified financial advisor for personalized recommendations.', this.margins.left, this.currentY);
    }

    generateRecommendations(extractedData) {
        const recommendations = [];

        // Emergency fund recommendation
        if (!extractedData.goals?.some(goal => goal.type?.includes('emergency'))) {
            recommendations.push({
                title: 'Build an Emergency Fund',
                description: 'Consider building an emergency fund covering 3-6 months of expenses for financial security and peace of mind.'
            });
        }

        // Investment recommendation based on risk tolerance
        if (extractedData.riskTolerance) {
            const level = extractedData.riskTolerance.level;
            if (level === 'high') {
                recommendations.push({
                    title: 'Consider Growth-Oriented Investments',
                    description: 'Your high risk tolerance suggests you may benefit from growth-focused investment strategies, such as equity-based portfolios.'
                });
            } else if (level === 'low') {
                recommendations.push({
                    title: 'Focus on Capital Preservation',
                    description: 'Your conservative approach suggests prioritizing capital preservation through bonds, savings accounts, and low-risk investments.'
                });
            }
        }

        // Goal-specific recommendations
        if (extractedData.goals?.some(goal => goal.type?.includes('house'))) {
            recommendations.push({
                title: 'House Purchase Planning',
                description: 'Consider opening a Help to Buy ISA or Lifetime ISA to maximize your house deposit savings with government bonuses.'
            });
        }

        if (extractedData.goals?.some(goal => goal.type?.includes('retirement'))) {
            recommendations.push({
                title: 'Pension Optimization',
                description: 'Review your workplace pension contributions and consider additional voluntary contributions to maximize your retirement savings.'
            });
        }

        // Income vs expenses analysis
        const totalIncome = extractedData.income?.reduce((sum, item) => sum + (item.amounts?.[0] || 0), 0) || 0;
        const totalExpenses = extractedData.expenses?.reduce((sum, item) => sum + (item.amounts?.[0] || 0), 0) || 0;

        if (totalIncome > 0 && totalExpenses > 0) {
            const surplus = totalIncome - totalExpenses;
            if (surplus > 0) {
                recommendations.push({
                    title: 'Optimize Your Surplus',
                    description: `You have a monthly surplus of £${surplus.toLocaleString()}. Consider allocating this towards your financial goals through systematic savings and investments.`
                });
            } else if (surplus < 0) {
                recommendations.push({
                    title: 'Budget Review Required',
                    description: 'Your expenses exceed your income. Consider reviewing your spending patterns and identifying areas where you can reduce costs.'
                });
            }
        }

        // Default recommendations if no specific data
        if (recommendations.length === 0) {
            recommendations.push({
                title: 'Complete Your Financial Profile',
                description: 'Share more details about your income, expenses, and goals to receive personalized recommendations.'
            });
        }

        return recommendations;
    }

    wrapText(text, maxWidth) {
        const words = text.split(' ');
        const lines = [];
        let currentLine = '';

        words.forEach(word => {
            const testLine = currentLine + (currentLine ? ' ' : '') + word;
            const textWidth = this.doc.getTextWidth(testLine);

            if (textWidth < maxWidth) {
                currentLine = testLine;
            } else {
                if (currentLine) {
                    lines.push(currentLine);
                }
                currentLine = word;
            }
        });

        if (currentLine) {
            lines.push(currentLine);
        }

        return lines;
    }

    checkPageBreak(requiredSpace) {
        if (this.currentY + requiredSpace > this.pageHeight) {
            this.doc.addPage();
            this.currentY = this.margins.top;
        }
    }

    calculateCompletionScore(extractedData) {
        const sections = [
            { key: 'income', weight: 25 },
            { key: 'expenses', weight: 20 },
            { key: 'goals', weight: 30 },
            { key: 'riskTolerance', weight: 15 },
            { key: 'assets', weight: 10 }
        ];

        let totalScore = 0;
        sections.forEach(section => {
            const data = extractedData[section.key];
            if (data && (Array.isArray(data) ? data.length > 0 : data !== null)) {
                totalScore += section.weight;
            }
        });

        return Math.min(totalScore, 100);
    }
}

export default new PDFGeneratorService();
